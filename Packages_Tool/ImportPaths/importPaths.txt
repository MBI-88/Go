




When we change a file, we must recompile the file’s package and potentially all the packages
that depend on it. Go compilation is notably faster than most other compiled languages, even
when building from scratch. There are three main reasons for the compiler’s speed. First, all
imports must be explicitly listed at the beginning of each source file, so the compiler does not
have to read and process an entire file to determine its dependencies. Second, the dependencies of 
a package form a directed acyclic graph, and because there are no cycles, packages can
be compiled separately and perhaps in parallel. Finally, the object file for a compiled Go package 
records export information not just for the package itself, but for its dependencies too.
When compiling a package, the compiler must read one object file for each import but need
not look beyond these files.

Each package is identified by a unique string called its import path. Import paths are the
strings that appear in import declarations.

import (
	"fmt"
	"math/rand"
	"encoding/json"
	"golang.org/x/net/html"
	"github.com/go-sql-driver/mysql"
)

For packages you intend to share or publish, import paths should be globally unique. To avoid
conflicts, the import paths of all packages other than those from the standard library should
start with the Internet domain name of the organization that owns or hosts the package; this
also makes it possible to find packages. For example, the declaration above imports an HTML
parser maintained by the Go team and a popular third-party MySQL database driver




