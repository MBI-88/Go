When the compiler encounters a reference to a name, it looks for a declaration, starting with
the inner most enclosing lexical block and working up to the universe block. If the compiler
finds no declaration, it reports an ‘‘undeclared name’’ error. If a name is declared in both an
outer block and an inner block, the inner declaration will be found first. In that case, the
inner declaration is said to shadow or hide the outer one, making it inaccessible:

func f() {}
var g = "g"
func main() {
    f := "f"
    fmt.Println(f) // "f"; local var f shadows package-level func f
    fmt.Println(g) // "g"; package-level var
    fmt.Println(h) // compile error: undefined: h
}