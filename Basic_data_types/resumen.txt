Go’s types fall into four categories: basic types, aggregate types, reference types, and interface
types. Basic types, the topic of this chapter, include numbers, strings, and booleans. Aggregate
types—arrays (§4.1) and structs (§4.4)—form more complicated data types by combining values of several simpler ones. 
Reference types are a diverse group that includes pointers (§2.3.2),
slices (§4.2), maps (§4.3), functions (Chapter 5), and channels (Chapter 8), but what they have
in common is that they all refer to program variables or state in directly, so that the effect of an
operation applied to one reference is observed by all copies of that reference. Finally, we’ll talk
about interface types in Chapter 7.